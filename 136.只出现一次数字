//给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        map<int,int> M;
		int Len = nums.size();
		for (int i = 0; i < Len; i++){
			if (!M.count(nums[i])){
				M.insert(std::make_pair(nums[i], i));
			}
			else
				M.erase(nums[i]);
		}//for
		auto it = M.begin();
		return it->first;
    }
};

/*任何一个数字异或它自己都等于0。也就是说，如果我们从头到尾依次异或数组中的每一个数字，
那么最终的结果刚好是那个只出现一次的数字，因为那些出现两次的数字全部在异或中抵消掉了。*/


class Solution {
public:
	int singleNumber(vector<int>& nums) {
		int ans = nums[0];
		for (int i = 1; i < nums.size(); ++i){
			ans = ans ^ nums[i];
		}
		return ans;
	}
};
