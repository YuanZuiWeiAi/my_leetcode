// method 1
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int Maxszie = nums.size();
        int k1,k2;
	for ( k1 = 0; k1 < Maxszie - 1; k1++){
		int two = target - nums[k1];
		for ( k2 = k1 + 1; k2 < Maxszie; k2++){
			if (two == nums[k2])
				return{k1,k2};
		}
	}
        return {k1,k2};
    };
};

//method 2
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    map<int, int> numre;
	int Maxsize = nums.size();
	vector<int> b(2, -1);
	for (int k1 = 0; k1 < Maxsize; k1++){
		numre.insert(make_pair(nums[k1], k1));
	}
	for (int k2 = 0; k2 < Maxsize; k2++){
		int temp = target - nums[k2];
		if (numre.count(temp) && numre[temp] != k2){
			 b[0] = k2;
			 b[1] = numre[temp];
			return b;
		}
	}
	return b;
    }
};
// method 3
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int, int> numre;
	int Maxsize = nums.size();
	vector<int> b(2, -1);
	for (int k1 = 0; k1 < Maxsize; k1++){
		int temp = target - nums[k1];
		if (numre.count(temp)){
			 b[0] = k1;
			 b[1] = numre[temp];
			return b;
		}
		numre[nums[k1]] = k1;
	}
	return b;
    }
};
