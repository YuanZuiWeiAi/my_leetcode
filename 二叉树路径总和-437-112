//437
//给定一个二叉树，它的每个结点都存放着一个整数值。
//找出路径和等于给定数值的路径总数。
//路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。
//二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //递归实现
class Solution {
public:
    int SumPath = 0;
	int pathSum(TreeNode* root, int sum) {
		if (root == nullptr) return 0;
		TreeSum(root, sum);
		pathSum(root->left, sum);
	    pathSum(root->right, sum);
        return SumPath;
	}
	void TreeSum(TreeNode * root, int sum){
		if (root == nullptr) return;
		sum -= root->val;
		if (sum == 0)
			SumPath++;
		TreeSum(root->left, sum);
		TreeSum(root->right, sum);
	}
};
//给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
//说明: 叶子节点是指没有子节点的节点。-112
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if (root == nullptr) return false;
		sum -= root->val;
		if (root->left == nullptr && root->right == nullptr) return (sum == 0);
		return (hasPathSum(root->left, sum )|| hasPathSum(root->right, sum ) );
    }
};
