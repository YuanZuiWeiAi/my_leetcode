
/*给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n / 2 ⌋ 的元素。
你可以假设数组是非空的，并且给定的数组总是存在众数。*/

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int res;
		map<int, int> M;
		int Len = nums.size();
		for (int i = 0; i < Len; i++){
			M[nums[i]]++;
			if (M[nums[i]] > Len / 2)
				res = nums[i];
		}
		return res;
    }
};

/*如果我们把众数记为 + 1 + 1 ，把其他数记为 - 1−1 ，将它们全部加起来，
显然和大于 0 ，从结果本身我们可以看出众数比其他数多。*/
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;
		int res = nums[0];
		for (size_t i = 0; i < nums.size(); i++){
			if (res == nums[i])
				count++;
			else
				count--;
			if (count == 0)
				res = nums[i+1];
		}//for
		return res;
    }
};

