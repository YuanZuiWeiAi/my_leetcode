/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        deque<ListNode * > De;
		ListNode * p = head;
		if (p == nullptr) return true;
		while (p != nullptr){
			De.push_back(p);
			p = p->next;
		}//while
		int Len = De.size();
        if (Len == 1) return true;
		for (int i = 0; i < Len / 2; i++){
			if ( De[i]->val != De[Len - i - 1]->val ){
				return false;
            }
		}
		return true;
    }
};
 
 //快慢指针
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *slow = head, *fast = head, *pre = nullptr;
		while (fast){
			slow = slow->next;
			fast = fast->next ? fast->next->next : fast->next;
		}//取中点
		while (slow){
			ListNode * temp = slow->next;
			slow->next = pre;
			pre = slow;
			slow = temp;
		}//后半链表翻转
		while (pre && head){
			if (pre->val != head->val)
				return false;
			pre = pre->next;
			head = head->next;
		}
		return true;
    }
};
