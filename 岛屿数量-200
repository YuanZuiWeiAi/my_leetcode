//DFS
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
       if (grid.size() == 0) return 0;
		int Row = grid.size();
		int Col = grid[0].size();
		int numland = 0;
		for (int k1 = 0; k1 < Row; k1++){
			for (int k2 = 0; k2 < Col; k2++){
				if (grid[k1][k2] == '1'){
					++numland;
					DFSboard(grid, k1, k2);
				}//if
			}//for k2
		}//for k1
		return numland;
	}
private:
	void DFSboard(vector<vector<char>>& board, int i, int j){
		board[i][j] = '0';
		if (i - 1 >= 0 && board[i - 1][j] == '1') DFSboard(board, i - 1, j);
		if (i + 1 < board.size() && board[i + 1][j] == '1') DFSboard(board, i + 1, j);
		if (j - 1 >= 0 && board[i][j - 1] == '1') DFSboard(board, i, j - 1);
		if (j + 1 < board[0].size() && board[i][j + 1] == '1') DFSboard(board, i, j + 1);
	}
};


//BFS
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        	if (grid.size() == 0) return 0;
	int Row = grid.size();
	int Col = grid[0].size();
	queue<pair<int, int>> Q;
	int numland = 0;
	for (int k1 = 0; k1 < Row; k1++){
		for (int k2 = 0; k2 < Col; k2++){
			if (grid[k1][k2] == '1'){
				numland++;
				grid[k1][k2] = '0';
				Q.push({ k1, k2 });
				while (!Q.empty()){
					auto Ite =  Q.front();
					Q.pop();
					int nr = Ite.first;
					int nc = Ite.second;
					if (nr - 1 >= 0 && grid[nr - 1][nc] == '1'){
						grid[nr - 1][nc] = '0';
						Q.push({ nr - 1, nc });
					}
					if (nr + 1 < Row && grid[nr + 1][nc] == '1'){
						grid[nr + 1][nc] = '0';
						Q.push({ nr + 1, nc });
					}
					if (nc - 1 >= 0 && grid[nr][nc - 1] == '1'){
						grid[nr][nc - 1] = '0';
						Q.push({ nr, nc - 1 });
					}
					if (nc + 1 < Col && grid[nr][nc + 1] == '1'){
						grid[nr][nc + 1] = '0';
						Q.push({ nr, nc + 1 });
					}
				}// while
			}//if
		}// for k2
	}//for k1
	return numland;
    }
};
