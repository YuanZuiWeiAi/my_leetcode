
/*X是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响X偷窃的唯一制约因素就是
相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算X在不触动警报装置的情况下，能够偷窃到的最高金额。*/

class Solution {
public:
    int rob(vector<int>& nums) {
        int NumEven = 0, NumOdd = 0;
		for (int i = 0; i < nums.size(); i++){
			if (i % 2 == 0){
				NumEven += nums[i];
				NumEven = std::max(NumEven, NumOdd);
			}//if
			else{
				NumOdd += nums[i];
				NumOdd = std::max(NumEven, NumOdd);
			}
		}//for
		return std::max(NumEven, NumOdd);
    }
};

//动态规划
/*标签：动态规划
动态规划方程：dp[n] = MAX(dp[n - 1], dp[n - 2] + num)
由于不可以在相邻的房屋闯入，所以在当前位置 n 房屋可盗窃的最大值，
要么就是 n - 1 房屋可盗窃的最大值，要么就是 n - 2 房屋可盗窃的最大值加上当前房屋的值，二者之间取最大值
举例来说：1 号房间可盗窃最大值为 33 即为 dp[1] = 3，2 号房间可盗窃最大值为 44 
即为 dp[2] = 4，3 号房间自身的值为 22 即为 num = 2，那么 dp[3] = MAX(dp[2], 
dp[1] + num) = MAX(4, 3 + 2) = 5，3 号房间可盗窃最大值为 55
时间复杂度：O(n)O(n)，nn 为数组长度*/
public:
    int rob(vector<int>& nums) {
        int Len = nums.size();
		    if (Len == 0) return 0;
		    int *dp = new int[Len + 1];
		    dp[0] = 0;
		    dp[1] = nums[0];
		    for (int i = 2; i <= Len; i++)
			      dp[i] = std::max(dp[i - 2] + nums[i - 1], dp[i - 1]);
		    return dp[Len];
    }
};
