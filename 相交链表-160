
//编写一个程序，找到两个单链表相交的起始节点。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode * p = headA,  * q = headB;
		set<ListNode * > S;
		while (p != nullptr || q != nullptr){
            if (p == q)
				return p;
			if (S.count(q) == 0 && S.count(p) == 0){
				if (p != nullptr){
                    S.insert(p);
					p = p->next;
                    
                }
				if (q != nullptr){
                    S.insert(q);
					q = q->next;
                    
                }
			}//if
			else{
				if (S.count(q) != 0){
					auto it = S.find(q);
					return *it;
				}
				if (S.count(p) != 0){
					auto it = S.find(p);
					return *it;
				}
			}//else
		}//while
		return NULL;
    }
};

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        set<ListNode *> S;
		ListNode * p = headA;
		ListNode * q = headB;
		while (p != nullptr){
			S.insert(p);
			p = p->next;
		}
		while (q != nullptr){
			if (S.count(q) != 0)
				return q;
			q = q->next;
		}
		return NULL;
    }
};

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA == nullptr || headB == nullptr) return NULL;
		ListNode * p = headA;
		ListNode * q = headB;
		while ( p != q ){
			if (p == nullptr)
				p = headB;
            else
			    p = p->next;
			if (q == nullptr)
				q = headA;
            else
			    q = q->next;
		}
		return p;
    }
};
