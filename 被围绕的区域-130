class Solution {
public:
	void solve(vector<vector<char>>& board) {
		if (board.size() == 0) return;
		int Row = board.size();
		int Col = board[0].size();
		for (int k1 = 0; k1 < Row; k1++){
			for (int k2 = 0; k2 < Col; k2++){
				bool isb = k1 == 0 || k2 == 0 || k1 == Row - 1 || k2 == Col - 1;
				if (isb && board[k1][k2] == 'O')
					DFSboard(board, k1, k2);
			}//for k2
		}//for k1
    
    /*
    *for (int k1 = 0; k1 < Row; k1++){
		*	DFSboard(board, k1, 0);
		*	DFSboard(board, k1, Col - 1);
		*}
		*for (int k2 = 0; k2 < Col; k2++){
		*	DFSboard(board, 0, k2);
		*	DFSboard(board, Row - 1, k2);
		*}
    */

		for (int k1 = 0; k1 < Row; k1++){
			for (int k2 = 0; k2 < Col; k2++){
				if (board[k1][k2] == 'O')
					board[k1][k2] = 'X';
				if (board[k1][k2] == '#')
					board[k1][k2] = 'O';
			}
		}
	}
private:
	void DFSboard(vector<vector<char>>& board, int i, int j){
		if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || board[i][j] == '#' || board[i][j] == 'X')
			return;
		board[i][j] = '#';
		DFSboard(board, i - 1, j);  
		DFSboard(board, i + 1, j);
		DFSboard(board, i, j - 1);
		DFSboard(board, i, j + 1);
	}
};
